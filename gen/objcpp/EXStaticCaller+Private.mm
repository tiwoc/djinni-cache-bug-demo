// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#import "EXStaticCaller+Private.h"
#import "EXStaticCaller.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "EXBarListener+Private.h"
#import "EXFooListener+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EXStaticCaller ()

- (id)initWithCpp:(const std::shared_ptr<::StaticCaller>&)cppRef;

@end

@implementation EXStaticCaller {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::StaticCaller>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::StaticCaller>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)callFooWithListener:(nullable id<EXFooListener>)listener {
    try {
        ::StaticCaller::callFooWithListener(::djinni_generated::FooListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)callBarWithListener:(nullable id<EXBarListener>)listener {
    try {
        ::StaticCaller::callBarWithListener(::djinni_generated::BarListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto StaticCaller::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto StaticCaller::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<EXStaticCaller>(cpp);
}

}  // namespace djinni_generated

@end
